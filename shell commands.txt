echo

脚本执行     1）赋权执行 chmod 755 hello.sh     ./hello.sh        2）直接执行 bash hello.sh

别名    alias  ls='ls  --color=never'    永久生效：vi  ~/.bashrc        删除：unalias/update  .bashrc

ctrl    +l 清屏    +a移至行首    +e移至行尾    +u删至行首    +z后台执行    +r搜命令

history   “ !+字串 ” 执行该字串开头命令        “！+number ”  执行指定行命令

输出重定向     命令 &>/dev/null  "垃圾站"         命令>>文件 2>&1    等于     命令&>>文件        命令 >> 文件1  2>>文件2          命令> test.log 覆盖       命令 >> test.log 追加       命令 2>> error.log 追加报错         

管道符       命令1 ; 命令2 顺序执行        命令1&& 命令2  ”1 true则执行2“          命令1 || 命令2  ”1 false则执行2“         命令1 | 命令2   "2执行1的输出"

通配符     ？任意一个字符        *任意多个字符        [  ] 任意多个指定字符       [ - ] 范围内单字符          [ ^ ] 非范围内单个字符        ‘  ' 使特殊字符不生效        "  "使特殊字符生效（$, ` , \）      `  `  == $( ) 调用系统命令        $ 调用变量

变量      pstree      unset  删变量    export 定义全局环境变量    set查所有变量    env查环境变量

位置参数变量    $n数字    $0命令本身    $1-$9 第1-9个参数    $*所有参数     $@所有参数（可循环）   $# 参数个数        for  i  in  1 2 3  do  echo $i done

预定义变量    $? 命令执行正确返回0，反之非0          $$当前进程号        $! 最后进程号

接收用户键盘输入        read  -p提示信息  -t等待秒数  -n指定字符数   -s保密输入

运算符        $ ( (  ) )       $ [  ]         $( ) 调用系统命令

declare声明变量类型        declare  [ +/ -] [optional] 变量    +设属性  -删属性   -a数组  -i整型  -x环境变量  -r只读  -p查类型 

正则表达式        ^a 行首    a$ 行尾    ^[ ]行首    [^a ] 取反    [ab] 单字符集     \ 转义符        a\{ n \} 连续n个aaa         a\{ n , \} 至少连续n个aaa        a\{ n , m \}  大于n小于m个aaa  

字符截取命令    cut -f 1,2 -d  ":" <file> 按冒号截取1,2列     awk '{print $n }' 截取第n列     awk 'BEGIN {FS=":"} $4>0 {printf $1 "\t" $3 "\n"} END {print $2}'  先begin再分隔符截取1,3列后end

字符替换命令    sed [option]  '[action]' <file>     [option] -n只输出被处理行  -e连接多命令  -i持久化修改        [action] a追加    c行替换    d行删除    i插入    p打印    s字串替换（格式=行范围 s/旧字串/新字串/g   ps: g=global）

条件判断语句    文件  -e 存在为真    -d是目录为真     -f 是文件为真    -s存在且非空为真   -r可读为真    -w可写为真    -x可执行为真   -nt  -ot  -ef 文件新旧比较  
                          整数  -eq   -ne不等为真  -gt  -lt  -ge  -le小于等于为真            字串    -z 空为真    -n 非空为真    ==相等为真    !=            多重条件判断    -a 类似&&    -o 类似 | |     ! 取反  



